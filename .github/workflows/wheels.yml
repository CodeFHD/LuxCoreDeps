# SPDX-FileCopyrightText: 2024 Howetuft
#
# SPDX-License-Identifier: Apache-2.0

name: LuxCore Python wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheel ${{ matrix.os }}-3.${{ matrix.python-minor }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-minor: ['8', '9', '10', '11', '12']
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    env:
      GH_TOKEN: ${{ github.token }}

    steps:

      - name: Checkout repository and submodule(s)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Install sccache
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'windows')
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Configure sccache
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Get cmake
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'windows')
        uses: lukka/get-cmake@latest

      - name: Prepare msvc
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: All - Clean source tree
        uses: ./.github/actions/all-clean-tree

      - name: Find workspace
        shell: bash
        run: |
          case ${{ runner.os }} in
            Linux) _workspace="/project";;
            Windows) _workspace=$(cygpath -u $GITHUB_WORKSPACE);;
            macOS) _workspace="$GITHUB_WORKSPACE";;
            *) echo "Unhandled os ${{ runner.os }}";exit 64;;
          esac
          echo "WORKSPACE=${_workspace}" >> "$GITHUB_ENV"

      # Build wheel
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.2
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp3${{ matrix.python-minor }}-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: auto64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_ENVIRONMENT: >
            SKBUILD_CMAKE_ARGS='--preset=conan-release;-G Ninja;--log-level=VERBOSE'
            SCCACHE_GHA_ENABLED=on
            SCCACHE_ERROR_LOG='${{ runner.os == 'Linux' && '/project' || github.workspace }}/sccache.log'
            SCCACHE_LOG=debug
            SCCACHE_CONF='${{ runner.os == 'Linux' && '/project' || github.workspace }}/sccache_config'
            SCCACHE_DIRECT=true
            SCCACHE_C_CUSTOM_CACHE_BUSTER=${{ matrix.os }}-${{ matrix.python-minor }}
            CMAKE_CXX_COMPILER_LAUNCHER=sccache
            CMAKE_C_COMPILER_LAUNCHER=sccache
            BOOST_INSTALL_LAYOUT=system
            SPDLOG_FMT_EXTERNAL=on
            MACOSX_DEPLOYMENT_TARGET=11.0
          CIBW_ENVIRONMENT_PASS_LINUX: |
            ACTIONS_CACHE_URL
            ACTIONS_RUNTIME_TOKEN
            RUNNER_OS
            RUNNER_ARCH
            WORKSPACE
          CIBW_BEFORE_ALL_LINUX: |
            # install sccache
            tar -xzf $WORKSPACE/deps/linux/sccache-v0.8.1-x86_64-unknown-linux-musl.tar.gz -C .
            mv sccache-v0.8.1-x86_64-unknown-linux-musl/sccache /usr/bin
            # install others
            dnf install -y ninja-build bison flex
          CIBW_BEFORE_ALL_MACOS: brew install bison flex
          CIBW_BEFORE_BUILD: bash ${{ env.WORKSPACE }}/scripts/install_conan.sh
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            LD_LIBRARY_PATH=$WORKSPACE/libs:$LD_LIBRARY_PATH
            echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"
            export LD_LIBRARY_PATH
            auditwheel --verbose repair -w {dest_dir} {wheel} --strip
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
            bash.exe ${{ env.WORKSPACE }}/scripts/repair_wheel_windows.sh '{wheel}' '{dest_dir}' '%VCToolsRedistDir%%Platform%'
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            cp {wheel} ${{ env.WORKSPACE }}
            export DYLD_LIBRARY_PATH=${{ env.WORKSPACE }}/libs
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
        with:
            package-dir: .
            output-dir: wheelhouse
            config-file: "{package}/pyproject.toml"

      #- name: Setup tmate session
        #uses: mxschmitt/action-tmate@v3

      # Upload cache log (debug)
      - uses: actions/upload-artifact@v4
        with:
          name: sccache-${{ matrix.os }}-${{ matrix.python-minor }}
          path: ${{ github.workspace }}/sccache.log

      #- name: Setup tmate session
        #if: ${{ failure() }}
        #uses: mxschmitt/action-tmate@v3

      # Upload artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.python-minor }}
          path: ./wheelhouse/*.whl
